// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
package imagehandle

import (
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

//获取图片的hsv特征
func GetImgFeature(hostport string, image []byte) (features []float64, err error) {
	//trans
	var trans thrift.TTransport
	trans, err = thrift.NewTSocket(hostport)
	if err != nil {
		return features, fmt.Errorf("Error creating transport %v", err)
	}
	defer trans.Close()
	//protocol
	var protocolFactory thrift.TProtocolFactory
	protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()

	//client
	client := NewHandlerClientFactory(trans, protocolFactory)
	if err := trans.Open(); err != nil {
		return features, fmt.Errorf("Error opening socket to %s, %v ", hostport, err)
	}
	features, err = client.Feature(image)
	if err != nil {
		return features, fmt.Errorf("Error client.Feature(image) %v", err)
	}
	return features, nil
}

//深度学习
func DeepLearning(hostport string, image []byte) (r *Result_, err error) {
	//trans
	var trans thrift.TTransport
	trans, err = thrift.NewTSocket(hostport)
	if err != nil {
		return r, fmt.Errorf("Error creating transport %v", err)
	}
	defer trans.Close()
	//protocol
	var protocolFactory thrift.TProtocolFactory
	protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()

	//client
	client := NewHandlerClientFactory(trans, protocolFactory)
	if err := trans.Open(); err != nil {
		return r, fmt.Errorf("Error opening socket to %s, %v ", hostport, err)
	}
	r, err = client.DeepLearning(image)
	if err != nil {
		return r, fmt.Errorf("Error client.DeepLearning(image) %v", err)
	}
	return r, nil
}

//深度学习做物体检测
func ObjectDetectionDL(hostport string, image []byte) (r *Result_, err error) {
	//trans
	var trans thrift.TTransport
	trans, err = thrift.NewTSocket(hostport)
	if err != nil {
		return r, fmt.Errorf("Error creating transport %v", err)
	}
	defer trans.Close()
	//protocol
	var protocolFactory thrift.TProtocolFactory
	protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()

	//client
	client := NewHandlerClientFactory(trans, protocolFactory)
	if err := trans.Open(); err != nil {
		return r, fmt.Errorf("Error opening socket to %s, %v ", hostport, err)
	}
	r, err = client.ObjectDetectionDL(image)
	if err != nil {
		return r, fmt.Errorf("Error client.ObjectDetectionDL(image) %v", err)
	}
	return r, nil
}
